{
  "course_name": "Grokking the API Design Interview - Learn Interactively",
  "course_overview": "Designing an API is an involved activity where the goal is to make sense of complex requirements. A designer is expected to understand requirements and steer the design in a cohesive way. Design activity often covers a lot of breadth and targets specific depth topics. \n\nYou’ll design APIs of well-known systems, such as YouTube, Stripe, Zoom, and more. You’ll also learn how they fit in the bigger product. You start with a discussion of recurring concepts so that we could use them freely as building blocks. Then, meeting functional requirements by tracing the lifespan of each API call from the client to the service. Next, you’ll learn to use a reference back-end implementation to show how an API call does its work. Reducing client-visible latency will be one of the main goals you will learn while making a competitive API and product.\n\nThis course will get you ready for an API design interview. It observes the systems from a clients’ perspective and reveals how client calls interact with the back-end system.",
  "course_folder": "grokking the api design interview",
  "course_lessons": [
    "0-introduction to apis",
    "1-unpacking api design",
    "2-about the api design course",
    "3-business considerations with apis",
    "4-the narrow waist of the internet",
    "5-latency and throughput",
    "6-network sockets as a foundation for communication",
    "7-world wide web",
    "8-hypertext transfer protocol http",
    "9-evolution of http",
    "10-remote procedure calls rpcs",
    "11-websockets",
    "12-data representation and efficient communication in apis",
    "13-textual data formats",
    "14-binary data formats",
    "15-introduction to web api architectural styles",
    "16-representational state transfer rest web architecture style",
    "17-restful api",
    "18-graphql a query language for apis",
    "19-the grpc framework",
    "20-comparisons of different api architecture styles",
    "21-quiz on architectural styles",
    "22-introduction to api security",
    "23-transport layer security tls",
    "24-securing apis using input validation",
    "25-cross origin resource sharing cors in apis",
    "26-authentication and authorization",
    "27-oauth the authorization framework",
    "28-authentication and authorization frameworks openid and saml",
    "29-high level view of security in apis",
    "30-quiz on api security",
    "31-api versioning",
    "32-evolving an api design",
    "33-rate limiting",
    "34-client adapting apis",
    "35-data fetching patterns",
    "36-event driven architecture protocols",
    "37-cookies and sessions",
    "38-the role of idempotency in api design",
    "39-server side rendering vs client side rendering",
    "40-quiz on important api concepts i",
    "41-speeding up web page loading",
    "42-resource hints and debouncing",
    "43-circuit breaker pattern",
    "44-managing retries",
    "45-caching at different layers",
    "46-api monitoring",
    "47-quiz on important api concepts ii",
    "48-introduction to response time in apis",
    "49-estimation of processing time of an api",
    "50-estimation of latency of an api",
    "51-the estimation of response time of an api",
    "52-discussion on response time",
    "53-the redcamel approach for designing apis",
    "54-conventions for the design chapters of the course",
    "55-foundational api designs",
    "56-requirements of the search api",
    "57-introduction to the search service",
    "58-search api design decisions",
    "59-api model for the search service",
    "60-refinements in the search api",
    "61-search api design evaluation and latency budget",
    "62-requirements of the file api",
    "63-file api design decisions",
    "64-api model for file service",
    "65-file api design evaluation and latency budget",
    "66-requirements of the comment api",
    "67-comment api design decisions",
    "68-api model for the comment service",
    "69-comment api design evaluation and latency budget",
    "70-quiz on rating api",
    "71-introduction to the pub sub service",
    "72-requirements of the pub sub api",
    "73-pub sub api design decisions",
    "74-api model for pub sub service",
    "75-pub sub api design evaluation and latency budget",
    "76-advanced api design problems",
    "77-requirements of the youtube api",
    "78-introduction to video streaming",
    "79-youtube api design decisions",
    "80-api model for youtube service",
    "81-youtube api design evaluation and latency budget",
    "82-quiz on tiktok api design",
    "83-requirements of the messenger api",
    "84-messenger api design decisions",
    "85-api model for messenger service",
    "86-messenger api design evaluation and latency budget",
    "87-requirements of the google maps api",
    "88-google maps api design decisions",
    "89-api model for google maps service",
    "90-google maps api design evaluation and latency budget",
    "91-requirements of the zoom api",
    "92-introduction to video conferencing",
    "93-zoom api design decisions",
    "94-api model for zoom service",
    "95-zoom api design evaluation and latency budget",
    "96-requirements of the leetcode api",
    "97-leetcode api design decisions",
    "98-api model for leetcode service",
    "99-leetcode api design evaluation and latency budget",
    "100-requirements of the stripe api",
    "101-working of a payment system",
    "102-stripe api design decisions",
    "103-api model for stripe service",
    "104-stripe interaction with cards network",
    "105-stripe api design evaluation and latency budget",
    "106-requirements of the twitter api",
    "107-twitter api design decisions",
    "108-api model for twitter service",
    "109-twitter api design evaluation and latency budget",
    "110-requirements of the uber api",
    "111-uber api design decisions",
    "112-api model for uber service",
    "113-uber api design evaluation and latency budget",
    "114-requirements of the camelcamelcamel api",
    "115-camelcamelcamel api design decisions",
    "116-api model for camelcamelcamel service",
    "117-camelcamelcamel s communication with the amazon service",
    "118-camelcamelcamel api design evaluation and latency budget",
    "119-requirements of the gaming api",
    "120-introduction to the gaming ecosystem",
    "121-gaming api design decisions",
    "122-api model for the gaming service",
    "123-gaming api design evaluation and latency budget",
    "124-what causes api failures",
    "125-knight capital failure due to development bug",
    "126-amazon s3 service disruption",
    "127-facebook and uber apis failure",
    "128-whats next",
    "129-conclusion"
  ],
  "repo_name": "orange-reproduction"
}
